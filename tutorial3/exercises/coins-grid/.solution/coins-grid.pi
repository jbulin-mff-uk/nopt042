import cp.
% import mip.
% import sat.

main => main(["31", "14"]).

main([SizeStr, CountStr]) =>
    Size = SizeStr.to_int,
    Count = CountStr.to_int,

    coins_grid(Size, Count, Board, Obj),
    solve($[min(Obj)], Board),
    output(Board, Obj).

coins_grid(Size, Count, Board, Obj) =>    
    % variables
    Board = new_array(Size, Size),
    Board :: 0..1,

    % constraints
    foreach(Row in 1..Size)
        exactly(Count, [Board[Row, Col] : Col in 1..Size], 1), % rows
    end,
    foreach(Col in 1..Size)
        exactly(Count, [Board[Row, Col] : Row in 1..Size], 1), % columns
    end,

    % symmetry breaking: rotate 180 degrees
    Board[1, Size] #<= Board[Size, 1],    
    
    % objective, better propagation
    RowCosts = new_array(Size),
    foreach(Row in 1..Size)
        RowCosts[Row] #= sum([(Board[Row, Col] * (Row - Col) * (Row - Col)) : Col in 1..Size])
    end,
    Obj #= sum(RowCosts).

    % % objective: quadratic horizontal distance
    % Obj #= sum([(Board[Row, Col] * (Row - Col) * (Row - Col)) : Row in 1..Size, Col in 1..Size]).

output(Board, Obj) =>
    foreach(Row in 1..Board.length)
        foreach(Col in 1..(Board[1]).length)
            if Board[Row, Col] == 1 then
                print("o")
            else
                print(".")
            end
        end,
        print("\n")
    end,
    printf("Objective = %d\n", Obj).
